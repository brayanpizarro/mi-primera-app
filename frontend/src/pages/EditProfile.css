.register-wrapper {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #4191a8 0%, #175674 100%);
  padding: 2rem;
}

.register-container {
  width: 100%;
  max-width: 440px;
  padding: 2.5rem;
  border-radius: 16px;
  background-color: rgba(255, 255, 255, 0.95);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(8px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.register-header {
  text-align: center;
  margin-bottom: 2rem;
}

.app-title {
  font-size: 1.8rem;
  color: #1e40af;
  margin-bottom: 0.4rem;
  font-weight: 600;
}

.app-subtitle {
  color: #4b5563;
  font-size: 0.95rem;
}

.register-form {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
}

.form-label {
  font-size: 0.9rem;
  color: #374151;
  font-weight: 500;
}

.form-input {
  padding: 0.8rem 1rem;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  font-size: 0.95rem;
  transition: all 0.2s ease;
  background-color: rgba(255, 255, 255, 0.8);
}

.form-input:focus {
  outline: none;
  border-color: #60a5fa;
  box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.2);
  background-color: white;
}

.submit-button {
  background: linear-gradient(to right, #2563eb, #0284c7);
  color: white;
  padding: 0.9rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 0.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.submit-button:hover {
  background: linear-gradient(to right, #1d4ed8, #0369a1);
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}


.form-input:invalid:not(:placeholder-shown) {
  border-color: #f87171;
}

.form-input:valid:not(:placeholder-shown) {
  border-color: #34d399;
}


@media (max-width: 480px) {
  .register-container {
    padding: 1.8rem;
    backdrop-filter: none;
    background-color: rgba(255, 255, 255, 0.98);
  }
}
.role-buttons-container {
  display: flex;
  gap: 10px;
  margin-top: 8px;
}

.role-button {
  flex: 1;
  padding: 10px 15px;
  border: 1px solid #ddd;
  background-color: #f8f9fa;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s ease;
  text-align: center;
}

.role-button:hover {
  background-color: #e9ecef;
}

.role-button.active {
  background-color: #007bff;
  color: white;
  border-color: #007bff;
}

.role-button.active:hover {
  background-color: #0069d9;
}

.google-user-notice {
  background-color: #e3f2fd;
  border: 1px solid #2196f3;
  border-radius: 4px;
  padding: 15px;
  margin-bottom: 20px;
  text-align: center;
}

.google-user-notice p {
  margin: 5px 0;
  color: #1976d2;
  font-size: 14px;
}

.google-user-notice p:first-child {
  font-weight: bold;
  margin-bottom: 10px;
}

.form-help {
  color: #666;
  font-size: 12px;
  margin-top: 5px;
  display: block;
}

function formatRut(rut: string) {
  let cleanRut = rut.replace(/[^0-9kK]/gi, '').toUpperCase();
  if (cleanRut.length < 2) return cleanRut;
  const cuerpo = cleanRut.slice(0, -1);
  const dv = cleanRut.slice(-1);
  let cuerpoConPuntos = '';
  for (let i = cuerpo.length; i > 0; i -= 3) {
    const start = Math.max(i - 3, 0);
    cuerpoConPuntos = (start > 0 ? '.' : '') + cuerpo.slice(start, i) + cuerpoConPuntos;
  }
  return `${cuerpoConPuntos}-${dv}`;
}

const handleRutChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  // Solo números y k/K
  let value = e.target.value.replace(/[^0-9kK]/g, '');
  setFormData(prev => ({
    ...prev,
    rut: value
  }));
};

const updateData = {
  ...(formData.name && { name: formData.name }),
  ...(isGoogleUser && formData.rut && formData.rut !== '0-0' && { rut: formatRut(formData.rut) }),
  ...(formData.currentPassword && { currentPassword: formData.currentPassword }),
  ...(formData.newPassword && { newPassword: formData.newPassword })
};

{isGoogleUser && (
  <div className="form-group">
    <label className="form-label">RUT (sin puntos ni guion)</label>
    <input 
      type="text" 
      className="form-input"
      placeholder="Ej: 22222222K"
      name="rut"
      value={formData.rut}
      onChange={(e) => {
        // Solo números y k/K
        let value = e.target.value.replace(/[^0-9kK]/g, '');
        setFormData(prev => ({
          ...prev,
          rut: value
        }));
      }}
      maxLength={10}
    />
    <small className="form-help">Ingresa tu RUT sin puntos ni guion. Ejemplo: 22222222K</small>
  </div>
)}